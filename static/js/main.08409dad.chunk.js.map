{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAsCeA,MAlCf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,sBAAKC,UAAU,QAAf,UAEE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACE,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACGD,EAAOI,KACN,SACEC,EACAC,GAFF,OAIE,oBAAgBL,UAAU,eAA1B,SACGI,GADMC,QAMf,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCoIOC,G,kNA5CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,4DALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IANzB,2C,uDAQZ,WACEQ,KAAKN,c,oBAEP,WAAU,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAACe,GAAD,OACV,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GA7BTE,IAAMC,YC3GxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.08409dad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      {/* 이미지 크롤링 */}\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"movie__genres\">\r\n          {genres.map(\r\n            (\r\n              genre,\r\n              index //두번째 인자는 도는 카운트? 반환(0,1,2 맵 돌때마다 카운팅)\r\n            ) => (\r\n              <li key={index} className=\"genres_genre\">\r\n                {genre}\r\n              </li>\r\n            )\r\n          )}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n}\r\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n// const foodILike = [\n//   {\n//     //name과 image가 있는 object, foodILike는 배열\n//     id: 1,\n//     name: \"kamja\",\n//     image:\n//       \"https://mediahub.seoul.go.kr/wp-content/uploads/2016/09/61a2981f41200ac8c513a3cbc0010efe.jpg\",\n//     rating: 5,\n//   },\n//   {\n//     id: 2,\n//     name: \"kamjajun\",\n//     image:\n//       \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQGQOEuiXOth2d35Cen-K60VqVnzS0hZ4UEIw&usqp=CAU\",\n//     rating: 4.9,\n//   },\n//   {\n//     id: 3,\n//     name: \"sayingkamja\",\n//     image: \"https://s3.peing.net/t/uploads/user/icon/13022962/f9d6a089.jpeg\",\n//     rating: 4.8,\n//   },\n// ];\n\n// // function Food(props) {\n// //   console.log(props.fav);\n// //   return <h1>I like Potato</h1>;\n// // }\n\n// function Food({ name, picture, rating }) {\n//   //{}사용하면 props 안붙이고 그 요소중 특정한것만 빼내기 가능\n//   return (\n//     <>\n//       {/* name, pricture props 사용 */}\n//       <h2>I like {name}</h2>\n//       <h4>{rating}/5.0</h4>\n//       <img src={picture} alt={name} />\n//     </>\n//   );\n// }\n\n// // function renderFood(dish) {\n// //   console.log(dish)\n// //   return <Food name={dish.name} picture={dish.image} />\n// // }\n\n// Food.propTypes = {\n//   name: PropTypes.string.isRequired,\n//   picture: PropTypes.string.isRequired,\n//   rating: PropTypes.number\n// };\n\n// function App() {\n//   return (\n//     <div>\n//       {/* {console.log(foodILike.map(renderFood))} */}\n//       {foodILike.map((dish) => (\n//         <Food\n//           key={dish.id}\n//           name={dish.name}\n//           picture={dish.image}\n//           rating={dish.rating}\n//         />\n//       ))}\n//     </div>\n//   );\n// }\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     console.log(\"hello\"); //컴포넌트가 실행(mount)되자마자 실행\n//   }\n//   state = {\n//     count: 0,\n//   };\n//   add=()=>{\n//     this.setState(current => ({count: current.count + 1 })); //state 직접변경 안됌, setState 사용으로 refresh(변화가 있는 부분만 react가 업데이트)\n//   };  //current, state를 set할 때 react에서 외부의 상태에 의존하지 않는 방법\n\n//   //setState 함수를 호출할 때마다 react는 rerender\n//   minus=()=>{\n//     this.setState(current => ({count: current.count - 1 }));\n//   };\n//   componentDidMount() {\n//     console.log(\"component rendered\"); //render 된 다음에 실행\n//   }\n//   componentDidUpdate() {\n//     console.log(\"I'm just update\")  //컴포넌트가 업데이트될 때 실행\n//   }\n//   componentWillUnmount() {\n//     console.log(\"Goodbye, cruel world\"); //컴포넌트가 unmount되면 실행(동작 확인은 어렵지만 동작함!)\n//   }\n//   render() {\n//     console.log(\"I'm rendering\")\n//     return (\n//       <div>\n//         <h1>The number is : {this.state.count}</h1>\n//         <button onClick={this.add}>App</button>\n//         <button onClick={this.minus}>Minus</button>\n//       </div>\n//     );\n//   }\n// }\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    this.setState({ movies, isLoading: false });\n  };\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root') //index.html의 태그 내 id와 같은 문자열이면 문제없음\n);"],"sourceRoot":""}